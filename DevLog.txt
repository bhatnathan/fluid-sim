Before 2019-05-14
Found GPU Gems 3 article Chapter 30. Real-Time Simulation and Rendering of 3D Fluids
Built an empty project and imported libraries

2019-05-14

Oh boy am I late in starting this project! Only 10 days left until the project submission. Well here it goes, my first blog entry:

After reading the text from GPU gems again and again and checking the papers/books that they refer to I realized that I had a very vague idea of what I was doing. So I started googling around a little about realtime 3D fluid simulation and I found a paper by a student who did it for their Master's thesis. 

https://www.mikeash.com/pyblog/fluid-simulation-for-dummies.html

Here he describes a fluid simulation model (without any rendering) that he wrote in C using Jos Stam's paper "Real-Time Fluid Dynamics for Games". Since his implementation is in C it's written imperatively. This tutorial was pretty straightforward (it does after all have "for dummies" in the title), but since I am writing this project in C++ I decided to attempt to rewrite his code into an object oriented solution.

Today I managed to get some code up for the FluidBox - the container for the fluid - and the FluidCells which can be thought of as a discretized vectorfield within the FluidBox containing information like velocity and density.

My next task will be to write the physics functions that update the FluidCells over time. I have looked at these functions already and I see some potential problems that could arise due to the paradigm shift to object oriented programming.

2019-05-15

Today I "finished" the code for the fluidbox backend. If there are no mistakes this should work as a backend for the fluid simulation physics. There are a few functions I just blindly made using the tutorial I'm following despite not knowing what they do. 

Next step is to render something.

2019-05-16

Today I wrote the code for a Transform class, that keeps the position, rotation and scale of an object. This will make it easier to keep track of where stuff is etc. 

I also wrote some code for rendering the fluidbox. Right now it renders each cell as a 2D square that's size is proportional to the density in each cell. This rendering works, but there are a few bugs.

I seem to be getting an out of bounds exception in my advectVelocity function, but it only happens occasionally. Another problem I'm noticing is if the stepsize is small, all the squares disappear, and the reason for this I am unsure of. 

One of the problems I have faced is that I do not know what "good" values are for the paramaters of the fluidbox. How high should I set viscosity? Diffusion? The density of a fluidcell? Its velocity? Should I add density to all the cells? These are some questions I will have to figure out in the coming days, but the first thing will be to fix my bugs.

2019-05-17

I have discovered a "leak". I don't know where it is, but it seems that the amount of fluid in the fluidbox is not constant, and that it seems to be disappearing somewhere. I do not know where this leak is and I am considering scrapping this version and implementing an imperative version similar to Mike Ash's solution. Whether that is smart to do this late in the game I don't know. 

I am also considering giving up on 3D and instead implementing 2D fluid simulation, since it is a lot easier on processing. Right now I am only able to render a fluidbox of size 10x10x10 without having the framerate take a significant blow. An alternative to making it 2D were to make the fluidbox non cubic, as in it can have a different width, height and depth.

I think what I'm going to do is scrap this version of the project and rewrite the code to use Mike Ash's version, but with variable width, depth and height. 

2019-05-18

It works! I did as I said yesterday and scrapped my version and implemented a version (even more) similar to Mike Ash's. The big differences are that I made a class of fluidbox and changed the code so I could set the width height and depth of the box. 

The amount of fluidcells is still a problem, although it is a bit smaller now that I can set the dimensions of the fluidbox. A potential solution would be to set the 3 diffusion functions and the 3 advect functions in the step function to run in parallel, as they should not affect one another. I do not know how much that would help but it's worth investigating.

The biggest problem I have ahead of me is choosing a method to visualize the fluid. As of right now I draw solid white spheres that are bigger depending on the amount of fluid present in them.

2019-05-20

I did another dumb thing! So since I want to simulate more fluid and have it look nice I decided to try to write a fluid simulation using shaders (which run on the GPU). Basically I scrapped my old fluidsim entirely and started fresh now using GLSL. I still have the old fluidsim on github, so in the worst case this will just have been a waste of time instead of something that will ruin everything. 

I am no longer using Mike Ash's code at all, now I going to try and use the code from GPU Gems chapter 38 and GPU Gems 3 chapter 30. I want to start by trying to implement a 2D fluidsimulation (chapter 38 in book 1) and if that goes well I'll move to 3D (chapter 30 in book 3).

This is a stupid idea, and I know that. I have never even written GLSL code before and I have a very limited understanding of how it works. But my main focus is learning, and GLSL seems like a good thing to learn. Therefore I'm going to give it the good ol' college try and see if I can get something working, and if not I'll go back to my old version and clean it up a bit.

Today I converted the HLSL code from chapter 38 to GLSL code. I also followed some tutorials on GLSL to get some basic code running. 

I'm already slightly lost. I have the fragment shader code for pretty much all of my physical functions (save applying a force to the fluid), but I don't know how to create the fluid and run the shader code on it. Rendering it afterwards will also be difficult. I have found a github project that uses chapter 38 as a basis for a fluid simulation in WebGL, and I'm going to try and learn from it, though it is difficult to see how it would translate into C++ code.

https://github.com/mharrys/fluids-2d

I'm not giving up yet, and I am having fun trying to understand how all this works. I'm learning a whole lot too so in that regard I'm happy. I just wish I had started this way sooner as I'm a bit stressed due to the approaching deadline 6 days from now.

2019-05-21

My dumb thing paid off. I knew I could do it. I found a project online that made an openGL version of chapter 38 of GPU Gems 1 that simulates smoke. I used this to figure out how to make my shaders work. I managed to get my project working in 2D.

https://prideout.net/blog/old/blog/index.html@p=58.html

The same person made a 3D version which I am going to try and use to make my project 3D. 

https://prideout.net/blog/old/blog/index.html@p=66.html

I am really happy with what I have done, it took me many hours. You should know that I didn't copy the project I found, all of my code is my own except for a few minor set up functions.

My next goal is to start trying to implement something in 3D.

2019-05-22

I DID IT! I managed to create a 3D fluidsimulation! I used the previously mentioned project as a guide as well as GPU gems chapter 30 book 3. 

I ran into some problems with the black screen of death for a few (possibly 5) hours. Turns out I forgot to set up the VAOs. Easy mistake to make I guess, but it always feels so dumb when it's an easy fix.

Tomorrow I plan on cleaning up my code a whole lot, and playing around with parameters, and possibly a different solver (mentioned in chapter 30) that improves detail apparently. I might have some work to do in other courses but if not I may also start on my report for this project.

I'm so happy I didn't give up.